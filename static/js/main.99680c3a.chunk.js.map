{"version":3,"sources":["Firebase.js","components/WaldoImage.js","components/Highscores.js","App.js","serviceWorker.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","getData","num","a","isNaN","ref","once","then","snapshot","val","catch","err","console","log","data","getHighScore","dataHS","Object","values","updateHighScore","id","update","highscore","name","error","app","WaldoImage","props","_isMounted","bind","state","link","coords","x","y","this","img","Firebase","res","setState","links","e","calcStyle","position","top","left","width","height","className","src","alt","style","onClick","handleClick","React","Component","Highscores","getHighScores","sort","b","map","user","key","updateHS","App","startGame","handleChange","game","found","start","time","Number","MAX_SAFE_INTEGER","username","choise","Date","now","choice","diff","target","value","htmlFor","type","onChange","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.99680c3a.chunk.js","sourcesContent":["import * as firebase from \"firebase/app\";\r\nimport \"firebase/database\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBDeIhQoJpHLS4uepWszXeZE0z2fna8z2k\",\r\n  authDomain: \"where-s-whaldo.firebaseapp.com\",\r\n  databaseURL: \"https://where-s-whaldo.firebaseio.com\",\r\n  projectId: \"where-s-whaldo\",\r\n  storageBucket: \"where-s-whaldo.appspot.com\",\r\n  messagingSenderId: \"757702852384\",\r\n  appId: \"1:757702852384:web:4b77e37832f1b9ab852145\",\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nconst db = firebase.database();\r\n\r\nconst updateHighScore = (num, id) => {\r\n  if (!isNaN(num)) {\r\n    id = id === \"\" ? \"Jhon\" : id;\r\n    db.ref(\"highscore/\" + id).update(\r\n      {\r\n        highscore: num,\r\n        name: id,\r\n      },\r\n      function (error) {\r\n        if (error) {\r\n          console.log(error + \"\\nhere\");\r\n        }\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\nconst getData = async (num) => {\r\n  if (isNaN(num)) return false;\r\n\r\n  const data = await db\r\n    .ref(\"imgs/\")\r\n    .once(\"value\")\r\n    .then((snapshot) => {\r\n      return snapshot.val() === null ? {} : snapshot.val();\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      return \"\";\r\n    });\r\n  return data;\r\n};\r\n\r\n// not tested needs to be mocked because data is\r\n// always different and bigger every time\r\nconst getHighScore = async () => {\r\n  let dataHS = await db\r\n    .ref(\"highscore/\")\r\n    .once(\"value\")\r\n    .then((snapshot) => {\r\n      return snapshot.val() === null ? {} : snapshot.val();\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      return \"\";\r\n    });\r\n  dataHS = Object.values(dataHS);\r\n  return dataHS;\r\n};\r\n\r\nexport default {\r\n  getData,\r\n  getHighScore,\r\n  updateHighScore,\r\n  db: firebase.database(),\r\n  app: firebase.app(),\r\n};\r\n","import React from \"react\";\r\nimport Firebase from \"../Firebase\";\r\n\r\nexport default class WaldoImage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this._isMounted = false;\r\n    this.getData = this.getData.bind(this);\r\n    this.state = {\r\n      link:\r\n        \"https://static.techspot.com/images2/news/bigimage/2018/08/2018-08-13-image-14.jpg\",\r\n      coords: { x: 1267, y: 86 },\r\n    };\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this._isMounted = true;\r\n    this._isMounted && this.getData(this.props.img);\r\n  }\r\n\r\n  getData(num) {\r\n    const data = Firebase.getData(num);\r\n    //if all goes according to plan update the state\r\n    data\r\n      .then(\r\n        (res) => {\r\n          this._isMounted &&\r\n            this.setState({\r\n              link: res.links[num] ? res.links[num] : res.links[0],\r\n              coords: res.coords[num] ? res.coords[num] : res.coords[0],\r\n            });\r\n        },\r\n        (e) => {}\r\n      )\r\n      .catch((e) => {});\r\n  }\r\n\r\n  render() {\r\n    const calcStyle = {\r\n      position: \"absolute\",\r\n      top: this.state.coords.y,\r\n      left: this.state.coords.x,\r\n      width: \"25px\",\r\n      height: \"25px\",\r\n    };\r\n    return (\r\n      <div className=\"waldoimage\">\r\n        <img id=\"image\" src={this.state.link} alt=\"waldo\"></img>\r\n        <button\r\n          style={calcStyle}\r\n          onClick={this.props.handleClick}\r\n          id=\"target\"\r\n        ></button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Firebase from \"../Firebase\";\r\n\r\nexport default class Highscores extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.getHighScores = this.getHighScores.bind(this);\r\n    this._isMounted = false;\r\n    this.state = {\r\n      data: [],\r\n    };\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this._isMounted = true;\r\n    this._isMounted && this.getHighScores();\r\n  }\r\n\r\n  getHighScores() {\r\n    const data = Firebase.getHighScore();\r\n    data\r\n      .then(\r\n        (res) => {\r\n          this._isMounted &&\r\n            this.setState({\r\n              data: res,\r\n            });\r\n        },\r\n        (e) => {}\r\n      )\r\n      .catch((e) => {});\r\n  }\r\n\r\n  updateHS() {\r\n    return this.state.data\r\n      .sort((a, b) => a.highscore - b.highscore)\r\n      .map((user) => {\r\n        if (user.name === this.props.user)\r\n          return (\r\n            <p key={user.name + user.highscore}>\r\n              {user.name}: {user.highscore} (you)\r\n            </p>\r\n          );\r\n        return (\r\n          <p key={user.name + user.highscore}>\r\n            {user.name}: {user.highscore}\r\n          </p>\r\n        );\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Highscores\">\r\n        <h1>Highscores</h1>\r\n        <div>{this.updateHS()}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import \"./css/reset.css\";\r\nimport React from \"react\";\r\nimport WaldoImage from \"./components/WaldoImage\";\r\nimport Highscores from \"./components/Highscores\";\r\nimport Firebase from \"./Firebase\";\r\n\r\nexport default class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.startGame = this.startGame.bind(this);\r\n    this.handleClick = this.handleClick.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.state = {\r\n      game: false,\r\n      found: false,\r\n      start: 0,\r\n      time: Number.MAX_SAFE_INTEGER,\r\n      username: \"\",\r\n      choise: 0,\r\n    };\r\n  }\r\n\r\n  startGame(num) {\r\n    this.setState({ game: true, start: Date.now(), choice: num });\r\n  }\r\n\r\n  handleClick() {\r\n    const diff = Date.now() - this.state.start;\r\n    if (diff < this.state.time) {\r\n      Firebase.updateHighScore(diff, this.state.username);\r\n    }\r\n    this.setState({ found: true, time: diff, game: false });\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({ username: e.target.value });\r\n  }\r\n\r\n  render() {\r\n    return this.state.game === true ? (\r\n      <div className=\"App\">\r\n        <WaldoImage\r\n          img={this.state.choice}\r\n          handleClick={this.handleClick}\r\n        ></WaldoImage>\r\n      </div>\r\n    ) : (\r\n      <div className=\"App\">\r\n        <div>\r\n          <label htmlFor=\"dif\">Choose difficulty </label>\r\n          <button\r\n            name=\"dif\"\r\n            onClick={() => {\r\n              this.startGame(0);\r\n            }}\r\n          >\r\n            Easy\r\n          </button>\r\n          <button\r\n            name=\"dif\"\r\n            onClick={() => {\r\n              this.startGame(1);\r\n            }}\r\n          >\r\n            Medium\r\n          </button>\r\n          <button\r\n            name=\"dif\"\r\n            onClick={() => {\r\n              this.startGame(2);\r\n            }}\r\n          >\r\n            Hard\r\n          </button>\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"name\">Username: </label>\r\n          <input type=\"text\" onChange={this.handleChange} name=\"name\"></input>\r\n        </div>\r\n        <Highscores user={this.state.username}></Highscores>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}